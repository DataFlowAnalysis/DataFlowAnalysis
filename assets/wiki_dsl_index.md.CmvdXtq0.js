import{_ as t,c as a,o,a2 as s}from"./chunks/framework.DDIT__tB.js";const u=JSON.parse('{"title":"Analysis DSL","description":"","frontmatter":{},"headers":[],"relativePath":"wiki/dsl/index.md","filePath":"wiki/dsl/index.md"}'),l={name:"wiki/dsl/index.md"};function n(i,e,c,d,r,p){return o(),a("div",null,e[0]||(e[0]=[s('<h1 id="analysis-dsl" tabindex="-1">Analysis DSL <a class="header-anchor" href="#analysis-dsl" aria-label="Permalink to &quot;Analysis DSL&quot;">​</a></h1><p>Constraints in our Data Flow Analysis can be expressed in our textual DSL: They commonly consist of two parts: A set of <em>source selectors</em> and a set of <em>destination selectors</em>. Additionally, one can define some relationships between the two selectors using <em>conditional selectors</em>.</p><p>For examples, see the <a href="/examples/dsl.html">DSL Examples</a>.</p><h2 id="source-selectors" tabindex="-1">Source Selectors <a class="header-anchor" href="#source-selectors" aria-label="Permalink to &quot;Source Selectors&quot;">​</a></h2><p>A <strong>source selector</strong> describes the origin of a data flow through the system. It can select nodes based on their node label or data labels flowing into the node.</p><h3 id="vertex-selector" tabindex="-1">Vertex Selector <a class="header-anchor" href="#vertex-selector" aria-label="Permalink to &quot;Vertex Selector&quot;">​</a></h3><p>To select nodes based on their label, one can use <code>vertex &lt;Type&gt;.&lt;Value&gt;</code> where <code>&lt;Type&gt;</code> describes a label type that must be present at a given node and <code>&lt;Value&gt;</code> must describe a label value of the defined label type that must be present at the node. The selector can be inverted to using <code>vertex !&lt;Type&gt;.&lt;Value&gt;</code>.</p><div class="tip custom-block"><p class="custom-block-title">Example</p><p>For the label <code>Location</code> and its values <code>EU</code> and <code>nonEU</code>, one might want to match all flows originating outside of the EU. For that, one might employ the following <strong>source selector</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>vertex Location.nonEU</span></span></code></pre></div></div><h3 id="data-selector" tabindex="-1">Data Selector <a class="header-anchor" href="#data-selector" aria-label="Permalink to &quot;Data Selector&quot;">​</a></h3><p>To select nodes based on their incoming labels on <em>any</em> pin/variable, one can use <code>data &lt;Type&gt;.&lt;Value&gt;</code>, where <code>&lt;Type&gt;</code> describes a label type that must be folowing into the node. <code>&lt;Value&gt;</code> must be a label of label type <code>&lt;Type&gt;</code> and must flow into the selected node. The selector can be inverted to match nodes that do not have the label at <em>any</em> pin/variable by using <code>data !&lt;Type&gt;.&lt;Value&gt;</code>.</p><div class="tip custom-block"><p class="custom-block-title">Example</p><p>For the label type <code>Sensitivity</code> and its labels <code>Personal</code> and <code>Public</code>, one can select nodes processing personal data using the following <strong>source selector</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>data Sensitivity.Personal</span></span></code></pre></div></div><h3 id="data-list-selector" tabindex="-1">Data List Selector <a class="header-anchor" href="#data-list-selector" aria-label="Permalink to &quot;Data List Selector&quot;">​</a></h3><p>To select nodes based on multiple of their incoming labels on <em>any</em> pin/variable, one can use <code>data &lt;Type1&gt;.&lt;Value1&gt;,&lt;Type2&gt;.&lt;Value2&gt;,...</code>, where <code>&lt;TypeX&gt;</code> describes a label type of which one must be flowing into the node. <code>&lt;ValueX&gt;</code> must be a label of label type <code>&lt;TypeX&gt;</code> and one must flow into the selected node. To match this selector, the node must only satisfy <em>one</em> of the <code>&lt;Type&gt;.&lt;Value&gt;</code> combinations in the list. The selector can be inverted to match nodes that do not have any of the label at <em>any</em> pin/variable by using <code>data !&lt;Type1&gt;.&lt;Value1&gt;,&lt;Type2&gt;.&lt;Value2&gt;,...</code>.</p><div class="tip custom-block"><p class="custom-block-title">Example</p><p>For the label type <code>Sensitivity</code> and its labels <code>Personal</code> and <code>Public</code>, one can select nodes processing personal <em>or</em> public data using the following <strong>source selector</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>data Sensitivity.Personal,Sensitivity.Public</span></span></code></pre></div></div><h3 id="vertex-type-selector" tabindex="-1">Vertex Type Selector <a class="header-anchor" href="#vertex-type-selector" aria-label="Permalink to &quot;Vertex Type Selector&quot;">​</a></h3><p>Additionally, one might select nodes based on their type using the <code>vertex type &lt;Type&gt;</code> <strong>source selector</strong>. The <code>&lt;Type&gt;</code> describes the model element the node must have to match the selector. Note that is property is dependent on the type of model that you are analyzing. The selector can be inverted to match nodes that do not have the specified type using <code>vertex type !&lt;Type&gt;</code>.</p><div class="tip custom-block"><p class="custom-block-title">Example</p><p>Assuming that you are working with a <a href="/wiki/dfd/">Data Flow Diagram</a>, one might want to match all occurences where data is processed. To do that, the constraint should match all processing elements present in the model.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>vertex type PROCESSING</span></span></code></pre></div></div><h3 id="data-name-selector" tabindex="-1">Data Name Selector <a class="header-anchor" href="#data-name-selector" aria-label="Permalink to &quot;Data Name Selector&quot;">​</a></h3><p>Lastly, one might select nodes based on the names of their incoming flows using <code>data named &lt;Name&gt;</code>. The <code>&lt;Name&gt;</code> placeholder can be replaced by any name and matches any node that has a incoming flow/variable with that name. The selector cannot be inverted.</p><div class="tip custom-block"><p class="custom-block-title">Example</p><p>If one might want to match secrets flowing into a node and flows/variables containing secrets are named &quot;secrets&quot;, one might match them with the following <strong>source selector</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>data named secrets</span></span></code></pre></div></div><h2 id="destination-selectors" tabindex="-1">Destination Selectors <a class="header-anchor" href="#destination-selectors" aria-label="Permalink to &quot;Destination Selectors&quot;">​</a></h2><p>A <strong>destination selector</strong> describes the destination of a data flow though the system. It selects nodes based on their vertex label or their vertex type.</p><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>Currently using only vertex selectors for both source and destination is unsupported. When you want to match a node based on their vertex attributes, consider using just Vertex Source Selectors. If you want to find flows originating at a specific node and arriving at <em>another</em> node, see this <a href="https://github.com/DataFlowAnalysis/DataFlowAnalysis/issues/179" target="_blank" rel="noreferrer">issue</a></p></div><h3 id="vertex-selector-1" tabindex="-1">Vertex Selector <a class="header-anchor" href="#vertex-selector-1" aria-label="Permalink to &quot;Vertex Selector&quot;">​</a></h3><p>To select nodes based on their label, one can use <code>vertex &lt;Type&gt;.&lt;Value&gt;</code> where <code>&lt;Type&gt;</code> describes a label type that must be present at a given node and <code>&lt;Value&gt;</code> must describe a label value of the defined label type that must be present at the node. This selector can be inverted using <code>vertex !&lt;Type&gt;.&lt;Value&gt;</code>.</p><div class="tip custom-block"><p class="custom-block-title">Example</p><p>For the label <code>Location</code> and its values <code>EU</code> and <code>nonEU</code>, one might want to match all flows originating outside of the EU. For that, one might employ the following <strong>source selector</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>vertex Location.nonEU</span></span></code></pre></div></div><h3 id="vertex-name-selector" tabindex="-1">Vertex Name Selector <a class="header-anchor" href="#vertex-name-selector" aria-label="Permalink to &quot;Vertex Name Selector&quot;">​</a></h3><p>A node can be selected according to it&#39;s name in the model, using the <code>named &lt;Name&gt;</code> selector, where <code>&lt;Name&gt;</code> is the name the vertex should have. The specified name cannot contain any spaces. Additionally, this selector can be inverted using <code>!named &lt;Name&gt;</code>.</p><div class="tip custom-block"><p class="custom-block-title">Example</p><p>To match all vertices <strong>exactly</strong> named &quot;Database&quot;, one might use the following selector:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>named Database</span></span></code></pre></div></div><h3 id="vertex-type-selector-1" tabindex="-1">Vertex Type Selector <a class="header-anchor" href="#vertex-type-selector-1" aria-label="Permalink to &quot;Vertex Type Selector&quot;">​</a></h3><p>Additionally, one might select nodes based on their type using the <code>vertex type &lt;Type&gt;</code> <strong>source selector</strong>. The <code>&lt;Type&gt;</code> describes the model element the node must have to match the selector. Note that is property is dependent on the type of model that you are analyzing. This selector can be inverted using <code>vertex type !&lt;Type&gt;</code>.</p><div class="tip custom-block"><p class="custom-block-title">Example</p><p>Assuming that you are working with a <a href="/wiki/dfd/">Data Flow Diagram</a>, one might want to match all occurences where data is processed. To do that, the constraint should match all processing elements present in the model.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>vertex type PROCESSING</span></span></code></pre></div></div><h2 id="conditional-selectors" tabindex="-1">Conditional Selectors <a class="header-anchor" href="#conditional-selectors" aria-label="Permalink to &quot;Conditional Selectors&quot;">​</a></h2><p>Conditional selectors use the values of <a href="/wiki/dsl/index.html#variables">Variables</a> to create additional constraints for nodes to fulfil: The constraints can check whether variables are present and whether the intersection of variable values is empty</p><h3 id="present-selector" tabindex="-1">Present Selector <a class="header-anchor" href="#present-selector" aria-label="Permalink to &quot;Present Selector&quot;">​</a></h3><p>The present selector checks whether the value of a variable is present and matches the node, if it has at least one value. A present selector is written as <code>present $&lt;VariableName&gt;</code> where <code>&lt;VariableName&gt;</code> is the name of the variable, without the <code>$</code>. The selector can be inverted to match nodes when the variable is not present by <code>present !$&lt;VariableName&gt;</code>.</p><div class="tip custom-block"><p class="custom-block-title">Example</p><p>Assuming a variable <code>$Roles</code> exists, one can check whether the variable is <em>not</em> present using the following <strong>conditional selector</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>present !$Roles</span></span></code></pre></div></div><h3 id="empty-selector" tabindex="-1">Empty Selector <a class="header-anchor" href="#empty-selector" aria-label="Permalink to &quot;Empty Selector&quot;">​</a></h3><p>The empty selector selects nodes based on the value of the set operation that follows the selector. Currently only intersections between the values of two variables are supported: To check whether the intersection between the values of two variables is empty one can use the following selector: <code>empty intersection($&lt;VariableName1&gt;, $&lt;VariableName2&gt;)</code>. Both <code>$&lt;VariableName1&gt;</code> and <code>$&lt;VariableName2&gt;</code> must be variables defined by selectors of the constraint.</p><div class="tip custom-block"><p class="custom-block-title">Example</p><p>If one wants to check whether a node is allowed to access the data, and the allowed access levels of the node is defined by <code>$GrantedRoles</code> while the access levels to access the data at the node is defined as <code>$AllowedRoles</code> one can express this constraint in the following selector:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>empty intersection($GrantedRoles, $AllowedRoles)</span></span></code></pre></div><p>Please note that if either <code>$GrantedRoles</code> or <code>$AllowedRoles</code> is empty this selector will match. If this is not desired behavior one can add the following to ensure both variables have values:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>present $GrantedRoles present $AllowedRoles</span></span></code></pre></div></div><h2 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h2><p>A variable describes a variable component in selecting nodes and can be used to compare values within one selector or between them. They are used in conjuction with <a href="/wiki/dsl/index.html#conditional-selectors">Conditional Selectors</a>.</p><p>A variable may be defined using the <code>$</code> (Dollar) sign.</p><div class="tip custom-block"><p class="custom-block-title">Example</p><p>If one wants to define a variable foo, you can do so like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$foo</span></span></code></pre></div></div><p>A variable may be used in place of a label or label type in any <a href="/wiki/dsl/index.html#source">Source Selector</a> or <a href="/wiki/dsl/index.html#destination">Destination Selector</a>.</p><div class="tip custom-block"><p class="custom-block-title">Example</p><p>This example assumes the Location of a node is modelled using a label type <code>Location</code> with labels <code>EU</code> and <code>nonEU</code>, applied to each node as a node label. If one wants to create a variable &quot;Location&quot; containing the Location of a node, one can write the following:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>vertex Location.$Location</span></span></code></pre></div><p>For label types <code>Encryption</code> and <code>Authenticated</code> both with label <code>Set</code>, one can store the label types that are set in a variable called &quot;Features&quot; using the following selector:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>vertex $Features.Set</span></span></code></pre></div></div>',46)]))}const b=t(l,[["render",n]]);export{u as __pageData,b as default};
