import{_ as e,c as t,o as s,a2 as i}from"./chunks/framework.DDIT__tB.js";const u=JSON.parse('{"title":"Running the Analysis via a CLI","description":"","frontmatter":{},"headers":[],"relativePath":"wiki/cli/index.md","filePath":"wiki/cli/index.md"}'),n={name:"wiki/cli/index.md"};function l(o,a,d,c,r,p){return s(),t("div",null,a[0]||(a[0]=[i('<h1 id="running-the-analysis-via-a-cli" tabindex="-1">Running the Analysis via a CLI <a class="header-anchor" href="#running-the-analysis-via-a-cli" aria-label="Permalink to &quot;Running the Analysis via a CLI&quot;">​</a></h1><p>The Data Flow Analysis can also be run using a CLI interface.<br> For that, we provide two Binaries on our <a href="/download/">Download Page</a>.</p><p>The analysis can be run the <code>DFDAnalysisCLI</code> or <code>PCMAnalysisCLI</code> respectively, depending on which model you are using.</p><h2 id="command-format" tabindex="-1">Command Format <a class="header-anchor" href="#command-format" aria-label="Permalink to &quot;Command Format&quot;">​</a></h2><p>When no parameters are provided to the CLI, the CLI asks interactively for the required file paths and other inputs to run the analysis.</p><p>Additionally, the CLI can be run with the paths to the model files (both absoulute and relative) and the <a href="/wiki/dsl/">DSL Constraint</a> that should be analyzed.</p><p>The constraints passed to the analysis can either be defined in a <code>.dfadsl</code> plain text file, or directly as a DSL Constraint String.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DFDAnalysisCLI [&lt;.dataflowdiagram&gt; &lt;.datadictionary&gt; &lt;.dfadsl|DSL Constraint String&gt;]</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>PCMAnalysisCLI [&lt;.usagemodel&gt; &lt;.allocation&gt; &lt;.nodecharacteristics&gt; &lt;.dfadsl|DSL Constraint String&gt;]</span></span></code></pre></div><h3 id="usage-examples" tabindex="-1">Usage Examples <a class="header-anchor" href="#usage-examples" aria-label="Permalink to &quot;Usage Examples&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Running the DFD analysis using the interactive CLI interface</p><p>The interactive CLI for the DFD analysis can be run with the following command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DFDAnalysisCLI</span></span></code></pre></div></div><div class="tip custom-block"><p class="custom-block-title">Running the DFD analysis using paths to the model files and a constraint passed as a parameter</p><p>Running the DFD analysis with models located in the current working directory and a constraint passed directly as a parameter can be done like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DFDAnalysisCLI model.dataflowdiagram model.datadictionary &quot;data Sensitivity.Personal neverFlows vertex Location.nonEU&quot;</span></span></code></pre></div></div><div class="tip custom-block"><p class="custom-block-title">Running the PCM analysis with model files and a constraint file</p><p>Running the PCM analysis can be run with model files and a <code>.dfadsl</code> file using the following command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>PCMAnalysisCLI model.usagemodel model.allocation model.nodecharacteristics model.dfadsl</span></span></code></pre></div></div>',13)]))}const g=e(n,[["render",l]]);export{u as __pageData,g as default};
