import{_ as t,c as a,o as i,a2 as o}from"./chunks/framework.DDIT__tB.js";const f=JSON.parse('{"title":"Data Flow Analysis with Palladio","description":"","frontmatter":{},"headers":[],"relativePath":"wiki/pcm/index.md","filePath":"wiki/pcm/index.md"}'),s={name:"wiki/pcm/index.md"};function n(r,e,d,l,h,c){return i(),a("div",null,e[0]||(e[0]=[o('<h1 id="data-flow-analysis-with-palladio" tabindex="-1">Data Flow Analysis with Palladio <a class="header-anchor" href="#data-flow-analysis-with-palladio" aria-label="Permalink to &quot;Data Flow Analysis with Palladio&quot;">​</a></h1><p>The Palladio Component Model is an <a href="https://en.wikipedia.org/wiki/Architecture_description_language" target="_blank" rel="noreferrer">Archtecture Description Language</a> for modeling software systems. The model contains various models used to describe the system from different viewpoints.</p><p>For more information on the base models see <a href="/wiki/pcm/models.html">our small summary</a> or the <a href="https://sdq.kastel.kit.edu/wiki/Palladio_Component_Model" target="_blank" rel="noreferrer">Palladio Component Model Wiki</a></p><h2 id="confidentiality-extension" tabindex="-1">Confidentiality Extension <a class="header-anchor" href="#confidentiality-extension" aria-label="Permalink to &quot;Confidentiality Extension&quot;">​</a></h2><p>For our analysis to gain information about the data flows in the system, the Palladio Extension extends existing models and introduces two additional models:</p><p>For information on how to use the provided editors for both PCM and the Confidentiality Extension, see the <a href="/wiki/pcm/editors.html">Editor Section</a></p><h3 id="data-dictionary" tabindex="-1">Data Dictionary <a class="header-anchor" href="#data-dictionary" aria-label="Permalink to &quot;Data Dictionary&quot;">​</a></h3><p>The <code>.pddc</code> model describe the existing <a href="/wiki/glossary.html#characteristic-type">Characteristic Types</a> and their <a href="/wiki/glossary.html#characteristic-value">Characteristic Values</a> in enums. Those are defined using the <code>enum</code> keyword and an identifier and list the different possible values of that type. An enum is defined as a <a href="/wiki/glossary.html#characteristic-type">Characteristic Type</a> with a given name using the <code>enumCharacteristicType</code> keyword followed by the name of the <a href="/wiki/glossary.html#characteristic-type">Characteristic Type</a> and the keyword <code>using</code> followed by the name of the enum.</p><h3 id="nodecharacteristics" tabindex="-1">NodeCharacteristics <a class="header-anchor" href="#nodecharacteristics" aria-label="Permalink to &quot;NodeCharacteristics&quot;">​</a></h3><p>The <code>.nodecharacteristics</code> files contains the node characteristics defined for some objects in the model. They fit into the following categories:</p><table tabindex="0"><thead><tr><th>Name</th><th>Annotated Element</th></tr></thead><tbody><tr><td>Usage Assignee</td><td>Usage Scenario</td></tr><tr><td>Resource Assignee</td><td>Resource Container</td></tr><tr><td>Assembly Assignee</td><td>Assembly Context</td></tr></tbody></table><h3 id="extensions" tabindex="-1">Extensions <a class="header-anchor" href="#extensions" aria-label="Permalink to &quot;Extensions&quot;">​</a></h3><p>In addition to the two models, a new variable usage has been introduced that can be used within EntryLevelSystemCalls, ExternalCalls and SetVariableActions: In these confidentiality variable usages, one can use an expression to describe how data is processed within that node. The left side must be an expression of <code>&lt;VariableName&gt;.&lt;CharacteristicType&gt;.&lt;CharacteristicValue&gt;</code> while the right side must be a boolean or another expression. A <code>*</code> in those assignments match all <a href="/wiki/glossary.html#characteristic-type">Characteristic Types</a> or <a href="/wiki/glossary.html#characteristic-value">Characteristic Values</a>. The variable names used thoughout are determined by the names of the parameters of functions defined in the model and the name of the variables referenced in Variable Usage elements.</p>',13)]))}const p=t(s,[["render",n]]);export{f as __pageData,p as default};
